#!/usr/bin/env python3

# gpu_watchdog.py
import subprocess
import time
import argparse
import sys
import signal

def get_gpu_temp(gpu_id=0):
    try:
        result = subprocess.run(
            ['nvidia-smi', f'--id={gpu_id}', '--query-gpu=temperature.gpu', '--format=csv,noheader,nounits'],
            stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True
        )
        return int(result.stdout.decode().strip())
    except Exception as e:
        print(f"Error reading GPU temp: {e}")
        return None

def kill_python_processes():
    print("Killing all python3 processes...")
    subprocess.run(['pkill', '-f', 'python3'])

def shutdown_system():
    print("Shutting down system...")
    subprocess.run(['sudo', 'shutdown', 'now'])

def main():
    parser = argparse.ArgumentParser(description="GPU Temperature Watchdog")
    parser.add_argument('--threshold', type=int, default=85, help='Temperature threshold in °C (default: 85)')
    parser.add_argument('--interval', type=float, default=5.0, help='Polling interval in seconds (default: 5)')
    parser.add_argument('--gpu', type=int, default=0, help='GPU ID to monitor (default: 0)')
    parser.add_argument('--action', choices=['kill', 'shutdown'], default='kill', help='Action when threshold exceeded')
    parser.add_argument('--dry-run', action='store_true', help='Simulate without taking action')

    args = parser.parse_args()

    print(f"GPU Watchdog started. Monitoring GPU {args.gpu}, threshold: {args.threshold}°C")

    try:
        while True:
            temp = get_gpu_temp(args.gpu)
            if temp is not None:
                print(f"GPU {args.gpu} temp: {temp}°C")
                if temp >= args.threshold:
                    print(f"⚠️  Threshold exceeded!")
                    if args.dry_run:
                        print("Dry run: no action taken.")
                    elif args.action == 'kill':
                        kill_python_processes()
                    elif args.action == 'shutdown':
                        shutdown_system()
                    break
            time.sleep(args.interval)
    except KeyboardInterrupt:
        print("\nWatchdog stopped by user.")

if __name__ == "__main__":
    main()   
